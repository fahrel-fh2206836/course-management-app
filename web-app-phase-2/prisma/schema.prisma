// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma-client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Roles {
  Admin
  Student
  Instructor
}

enum SectionStatus {
  COMPLETED
  ONGOING
  OPEN_REGISTRATION
}

enum ApprovalStatus {
  PENDING
  APPROVED
  CANCELLED
}

model User {
  userId    String @id @default(cuid())
  firstName String
  lastName  String
  username  String @unique
  password  String
  role      Roles  @default(Student)

  Admin      Admin?
  Student    Student?
  Instructor Instructor?
}

model Admin {
  userId String @id
  user   User   @relation(fields: [userId], references: [userId])
}

model Student {
  userId             String @id
  gpa                Float
  finishedCreditHour Int

  majorId String
  major   Major  @relation(fields: [majorId], references: [majorId])
  user    User   @relation(fields: [userId], references: [userId])

  registrations Registration[]
}

model Instructor {
  userId  String @id
  majorId String

  user  User  @relation(fields: [userId], references: [userId])
  major Major @relation(fields: [majorId], references: [majorId])

  sections Section[]
}

model Major {
  majorId         String @id @default(cuid())
  majorCode       String
  majorName       String
  totalCreditHour Int

  students    Student[]
  instructors Instructor[]
  courses     Course[]
}

model Course {
  id             String  @id @default(cuid())
  courseCode     String
  creditHour     Int
  courseName     String
  isOngoing      Boolean
  isRegistration Boolean

  majorId       String
  major         Major          @relation(fields: [majorId], references: [majorId])
  sections      Section[]
  registrations Registration[]

  prerequisites   CoursePrerequisite[] @relation("CourseToPrerequisite")
  prerequisiteFor CoursePrerequisite[] @relation("PrerequisiteToCourse")
}

// Essentially, self relationship with course.
model CoursePrerequisite {
  courseId       String
  prerequisiteId String

  course       Course @relation("CourseToPrerequisite", fields: [courseId], references: [id])
  prerequisite Course @relation("PrerequisiteToCourse", fields: [prerequisiteId], references: [id])

  @@id([courseId, prerequisiteId])
}

model Section {
  sectionId      String         @id @default(cuid())
  currentSeats   Int
  totalSeats     Int
  days           String?
  time           String?
  location       String?
  approvalStatus ApprovalStatus @default(PENDING)
  sectionStatus  SectionStatus  @default(OPEN_REGISTRATION)

  courseId     String
  instructorId String
  semester     String
  sem          Semester   @relation(fields: [semester], references: [semester])
  course       Course     @relation(fields: [courseId], references: [id])
  instructor   Instructor @relation(fields: [instructorId], references: [userId])

  registrations Registration[]
}

model Registration {
  id        String @id @default(cuid())
  sectionId String
  studentId String
  courseId  String
  grade     String

  section Section @relation(fields: [sectionId], references: [sectionId])
  student Student @relation(fields: [studentId], references: [userId])
  course  Course  @relation(fields: [courseId], references: [id])

  @@unique([sectionId, studentId])
}

model Semester {
  semester String @id 
  sections Section[]
}
